`timescale 1ns / 1ps
module wrapper_module(
				input   wire 				CLK,
				input   wire 				RESET,
			   	input   wire				BINC,
			   	input   wire				BINL,
			   	input   wire				BINU,
			   	input   wire				BIND,
			   	input   wire				BINR,
				output  wire    [11:0]		COLOUR_OUT,
				output  wire                HS,
				output  wire                VS			
					);
					
wire   [1:0]		  MSM_State;
wire   [3:0]       	  State_Maza_OUT;
wire   [3:0]       	  LED_DisplaySM_out;



wire    [7:0]		  game_Score; 
wire				  Bit17TriggerOut; 
wire    [1:0]		  StrobeCount;
wire    [1:0]		  Navigation_State;
wire    [3:0]		  BIN_IN;
wire				  Reached_Target;
wire				  Hit_wall_sig;
wire				  Hit_body_sig;
wire				  Hit_block_sig;
wire    [18:0]		  VGA_Address;
wire    [2:0]		  Object;
wire    [14:0]		  Random_Target_Address;
wire    [14:0]		  Block_Address1;
wire    [14:0]		  Block_Address2;
wire    [14:0]		  Block_Address3;
wire    [14:0]		  Block_Address4;
wire				  BINC_flag;
					
wire				  BINL_flag;
wire				  BINU_flag;
wire				  BIND_flag;
wire				  BINR_flag;	
				
Navigation_State_Machine Navigation_State_Machine_inst(//è¿™ä¸ªæ¨¡å?—ä¸»è¦?æ˜¯é€šè¿‡æŒ‰é”®çš„æŒ‰ä¸‹ï¼ŒæŽ§åˆ¶è›‡çš„ç§»åŠ¨æ–¹å?‘ï¼ŒæŠŠNavigation_Stateä¼ é€’ç»™è›‡å??æ ‡æŽ§åˆ¶æ¨¡å?—
    .CLK(CLK), 											///è›‡å??æ ‡æŽ§åˆ¶æ¨¡å?—æ ¹æ?®æ–¹å?‘ï¼Œæ›´æ–°è›‡çš„å??æ ‡ï¼Œ
    .RESET(!RESET), 
    .Navigation_State(Navigation_State), 
    .BINL(BINL_flag), 
    .BINU(BINU_flag), 
    .BIND(BIND_flag), 
    .BINR(BINR_flag)
    );

Master_State_Machine Master_State_Machine_inst (//////è¿™ä¸ªæ¨¡å?—ä¸ºç³»ç»Ÿçš„ä¸»æŽ§åˆ¶æ¨¡å?—ï¼Œä¸»è¦?æ ¹æ?®åˆ«çš„æ¨¡å?—ä¼ é€’è¿‡æ?¥çš„ä¿¡å?·ï¼Œå†³å®šæ¸¸æˆ?æ˜¯ç»“æ?Ÿäº†è¿˜æ˜¯ç»§ç»­ï¼Œ
    .CLK(CLK), 									////æ¯”å¦‚å½“æŽ¥æ”¶åˆ°è£…å¢™çš„ä¿¡å?·ï¼Œé‚£ä¹ˆæ¸¸æˆ?å°±ç»“æ?Ÿäº†ã€‚
    .RESET(!RESET), 
    .MSM_State(MSM_State), 
    .Hit_wall_sig(Hit_wall_sig), 
    .Hit_body_sig(Hit_body_sig), 
    .Hit_block_sig(Hit_block_sig), 
    .BINL(BINL_flag), 
    .BINU(BINU_flag), 
    .BIND(BIND_flag), 
    .BINR(BINR_flag), 
    .SCORE(game_Score)
    );	
					
Target_Generate Target_Generate_inst (/////////è¿™ä¸ªæ¨¡å?—ä¸»è¦?æ˜¯å› ä¸ºè›‡ä¼šä¸?å?œçš„æŠŠè‹¹æžœå?ƒäº†ï¼Œéœ€è¦?é‡?æ–°äº§ç”Ÿè‹¹æžœï¼Œè¿™ä¸ªæ¨¡å?—ä¸»è¦?æ˜¯æŽ§åˆ¶æ–°äº§ç”Ÿçš„è‹¹æžœçš„ä½?ç½®
    .CLK(CLK), 
    .RESET(!RESET), 
    .Reached_Target(Reached_Target), 
    .Block_Address1(Block_Address1), 
    .Block_Address2(Block_Address2), 
    .Block_Address3(Block_Address3), 
    .Block_Address4(Block_Address4), 
    .Random_Target_Address(Random_Target_Address)
    );

Snake_Control Snake_Control_inst (///////////è¿™ä¸ªæ¨¡å?—ä¸»è¦?æ˜¯é€šè¿‡æŽ§åˆ¶è›‡çš„ç§»åŠ¨ï¼Œå?Œæ—¶ç»™å‡ºå¯¹åº”çš„æ ‡å¿—ä½?ç»™å…¶ä»–æ¨¡å?—åˆ¤æ–­ç”¨
    .CLK(CLK), 
    .RESET(!RESET), 
    .Navigation_State(Navigation_State), 
    .MSM_State(MSM_State), 
    .VGA_Address(VGA_Address), 
    .Reached_Target(Reached_Target),
    .game_Score(game_Score),
    .Object(Object),
    .BINC_flag(BINC_flag),
    .Block_Address1(Block_Address1), 
    .Block_Address2(Block_Address2), 
    .Block_Address3(Block_Address3), 
    .Block_Address4(Block_Address4), 
    .Hit_wall_sig(Hit_wall_sig), 
    .Hit_body_sig(Hit_body_sig), 
    .Hit_block_sig(Hit_block_sig), 	
	.Random_Target_Address(Random_Target_Address)
    );


		
Vga_module Vga_module_inst (//////è¿™ä¸ªæ¨¡å?—ä¸»è¦?æ˜¯å®žçŽ°VGAæ ‡å‡†æ—¶åº?ï¼Œæ˜¾ç¤ºæ‰€æœ‰çš„ä¸œè¥¿
    .CLK(CLK), 
    .RESET(!RESET), 
    .MSM_State(MSM_State), 
    .COLOUR_OUT(COLOUR_OUT), 
    .VGA_Address(VGA_Address), 
	.Random_Target_Address(Random_Target_Address),
    .Object(Object), 
    .HS(HS), 
    .VS(VS)
    );	
/////////////////////////////////////////////
////assignment  test
/////////////////////////////////////////////
key_filter key_filter_inst0(
	.Clk(CLK),
	.Rst_n(RESET),
	.key_in(!BINC),
	.key_in_flag(BINC_flag)
	);
key_filter key_filter_inst1(
	.Clk(CLK),
	.Rst_n(RESET),
	.key_in(!BINU),
	.key_in_flag(BINU_flag)
	);
key_filter key_filter_inst2(
	.Clk(CLK),
	.Rst_n(RESET),
	.key_in(!BIND),
	.key_in_flag(BIND_flag)
	);
key_filter key_filter_inst3(
	.Clk(CLK),
	.Rst_n(RESET),
	.key_in(!BINL),
	.key_in_flag(BINL_flag)
	);
key_filter key_filter_inst4(
	.Clk(CLK),
	.Rst_n(RESET),
	.key_in(!BINR),
	.key_in_flag(BINR_flag)
	);	
endmodule				
